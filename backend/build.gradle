buildscript {
  repositories {
    mavenCentral()
  }
}

plugins {
  id 'java'
  id 'org.springframework.boot' version '3.4.7'
  // Spotless for the code style
  id "com.diffplug.spotless" version "7.2.0"
  id "com.github.ben-manes.versions" version "0.52.0"
}

apply plugin: 'io.spring.dependency-management'

group = 'com.odde'
version = '0.0.1-SNAPSHOT'
java {
  sourceCompatibility = 24
  targetCompatibility = 24
}

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

repositories {
  mavenCentral()
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-websocket'
  implementation 'org.springframework.boot:spring-boot-starter-data-redis'
  implementation 'org.flywaydb:flyway-mysql'
  implementation 'com.kjetland:mbknor-jackson-jsonschema_2.13:1.0.39'
  compileOnly 'org.flywaydb:flyway-core'
  implementation 'org.springframework.session:spring-session-core'
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  implementation 'org.springframework.boot:spring-boot-starter-security'
  implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
  implementation 'org.springdoc:springdoc-openapi-starter-webmvc-api:2.8.3'
  implementation 'io.github.lambdua:service:0.22.92'
  implementation 'com.squareup.retrofit2:adapter-rxjava3:3.0.0'
  implementation 'com.squareup.retrofit2:converter-jackson:3.0.0'
  implementation 'com.vladsch.flexmark:flexmark-all:0.64.8'
  compileOnly 'org.projectlombok:lombok:1.18.38'
  annotationProcessor 'org.projectlombok:lombok:1.18.38'
  developmentOnly 'org.springframework.boot:spring-boot-devtools'
  runtimeOnly 'com.mysql:mysql-connector-j:9.3.0'
  annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

test {
  useJUnitPlatform()
  testLogging {
    exceptionFormat = 'full'
  }
}

tasks.register("bootRunE2E") {
  group = "application"
  description = "Runs Doughnut SpringBoot application in e2e profile"
  doFirst {
    tasks.bootRun.configure {
      systemProperty("spring.profiles.active", "e2e")
    }
  }
  finalizedBy("bootRun")
}

spotless {
  java {
    importOrder() // standard import order
    removeUnusedImports()
    googleJavaFormat()
    targetExclude("build/**")
  }
}

tasks.register("lint") {
  dependsOn spotlessCheck
}

def configureSpringBootTask = { task, description, taskName ->
  task.group = 'application'
  task.description = description
  task.classpath = sourceSets.main.runtimeClasspath
  task.mainClass = 'com.odde.doughnut.DoughnutApplication'
  task.systemProperty("spring.profiles.active", "test")
  task.args = ['--server.port=0'] // Using 0 will let Spring Boot pick a random available port
  task.systemProperty("odd-e.doughnut.task", taskName)
}

// Register and configure the migrateTestDB task
tasks.register("migrateTestDB", JavaExec) {
  configureSpringBootTask(delegate, "Runs DB migration for test profile", "migrateTestDB")
  ignoreExitValue = false  // Make the task fail if the Java process exits with non-zero
  classpath = sourceSets.main.runtimeClasspath.filter { file ->
    !file.name.contains('spring-boot-devtools')
  }
}

// Register and configure the generateOpenAPIDocs task
tasks.register('generateOpenAPIDocs', JavaExec) {
  configureSpringBootTask(delegate, 'Generate OpenAPI documentation', "generateOpenAPIDocs")
  // Exclude devtools to avoid non-zero exit due to restart hooks
  classpath = sourceSets.main.runtimeClasspath.filter { file ->
    !file.name.contains('spring-boot-devtools')
  }
}
