/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// Generated by unplugin-vue-router. ‼️ DO NOT MODIFY THIS FILE ‼️
// It's recommended to commit this file.
// Make sure to add this file to your tsconfig.json file as an "includes" or "files" entry.

declare module 'vue-router/auto-routes' {
  import type {
    RouteRecordInfo,
    ParamValue,
    ParamValueOneOrMore,
    ParamValueZeroOrMore,
    ParamValueZeroOrOne,
  } from 'vue-router'

  /**
   * Route name map generated by unplugin-vue-router
   */
  export interface RouteNamedMap {
    '/AdminDashboardPage': RouteRecordInfo<'/AdminDashboardPage', '/AdminDashboardPage', Record<never, never>, Record<never, never>>,
    '/AnsweredQuestionPage': RouteRecordInfo<'/AnsweredQuestionPage', '/AnsweredQuestionPage', Record<never, never>, Record<never, never>>,
    '/AssessmentAndCertificateHistoryPage': RouteRecordInfo<'/AssessmentAndCertificateHistoryPage', '/AssessmentAndCertificateHistoryPage', Record<never, never>, Record<never, never>>,
    '/AssessmentPage': RouteRecordInfo<'/AssessmentPage', '/AssessmentPage', Record<never, never>, Record<never, never>>,
    '/AssimilationPage': RouteRecordInfo<'/AssimilationPage', '/AssimilationPage', Record<never, never>, Record<never, never>>,
    '/BazaarPage': RouteRecordInfo<'/BazaarPage', '/BazaarPage', Record<never, never>, Record<never, never>>,
    '/CircleJoinPage': RouteRecordInfo<'/CircleJoinPage', '/CircleJoinPage', Record<never, never>, Record<never, never>>,
    '/CircleShowPage': RouteRecordInfo<'/CircleShowPage', '/CircleShowPage', Record<never, never>, Record<never, never>>,
    '/CirclesPage': RouteRecordInfo<'/CirclesPage', '/CirclesPage', Record<never, never>, Record<never, never>>,
    '/commons/ContainerPage': RouteRecordInfo<'/commons/ContainerPage', '/commons/ContainerPage', Record<never, never>, Record<never, never>>,
    '/commons/TeleportToHeadStatus': RouteRecordInfo<'/commons/TeleportToHeadStatus', '/commons/TeleportToHeadStatus', Record<never, never>, Record<never, never>>,
    '/FailureReportPage': RouteRecordInfo<'/FailureReportPage', '/FailureReportPage', Record<never, never>, Record<never, never>>,
    '/HomePage': RouteRecordInfo<'/HomePage', '/HomePage', Record<never, never>, Record<never, never>>,
    '/ManageMCPTokensPage': RouteRecordInfo<'/ManageMCPTokensPage', '/ManageMCPTokensPage', Record<never, never>, Record<never, never>>,
    '/MessageCenterPage': RouteRecordInfo<'/MessageCenterPage', '/MessageCenterPage', Record<never, never>, Record<never, never>>,
    '/NonproductionOnlyLoginPage': RouteRecordInfo<'/NonproductionOnlyLoginPage', '/NonproductionOnlyLoginPage', Record<never, never>, Record<never, never>>,
    '/NotebooksPage': RouteRecordInfo<'/NotebooksPage', '/NotebooksPage', Record<never, never>, Record<never, never>>,
    '/NoteShowPage': RouteRecordInfo<'/NoteShowPage', '/NoteShowPage', Record<never, never>, Record<never, never>>,
    '/RecallPage': RouteRecordInfo<'/RecallPage', '/RecallPage', Record<never, never>, Record<never, never>>,
    '/RecentPage': RouteRecordInfo<'/RecentPage', '/RecentPage', Record<never, never>, Record<never, never>>,
    '/UserNewRegisterPage': RouteRecordInfo<'/UserNewRegisterPage', '/UserNewRegisterPage', Record<never, never>, Record<never, never>>,
  }

  /**
   * Route file to route info map by unplugin-vue-router.
   * Used by the volar plugin to automatically type useRoute()
   *
   * Each key is a file path relative to the project root with 2 properties:
   * - routes: union of route names of the possible routes when in this page (passed to useRoute<...>())
   * - views: names of nested views (can be passed to <RouterView name="...">)
   *
   * @internal
   */
  export interface _RouteFileInfoMap {
    'src/pages/AdminDashboardPage.vue': {
      routes: '/AdminDashboardPage'
      views: never
    }
    'src/pages/AnsweredQuestionPage.vue': {
      routes: '/AnsweredQuestionPage'
      views: never
    }
    'src/pages/AssessmentAndCertificateHistoryPage.vue': {
      routes: '/AssessmentAndCertificateHistoryPage'
      views: never
    }
    'src/pages/AssessmentPage.vue': {
      routes: '/AssessmentPage'
      views: never
    }
    'src/pages/AssimilationPage.vue': {
      routes: '/AssimilationPage'
      views: never
    }
    'src/pages/BazaarPage.vue': {
      routes: '/BazaarPage'
      views: never
    }
    'src/pages/CircleJoinPage.vue': {
      routes: '/CircleJoinPage'
      views: never
    }
    'src/pages/CircleShowPage.vue': {
      routes: '/CircleShowPage'
      views: never
    }
    'src/pages/CirclesPage.vue': {
      routes: '/CirclesPage'
      views: never
    }
    'src/pages/commons/ContainerPage.vue': {
      routes: '/commons/ContainerPage'
      views: never
    }
    'src/pages/commons/TeleportToHeadStatus.vue': {
      routes: '/commons/TeleportToHeadStatus'
      views: never
    }
    'src/pages/FailureReportPage.vue': {
      routes: '/FailureReportPage'
      views: never
    }
    'src/pages/HomePage.vue': {
      routes: '/HomePage'
      views: never
    }
    'src/pages/ManageMCPTokensPage.vue': {
      routes: '/ManageMCPTokensPage'
      views: never
    }
    'src/pages/MessageCenterPage.vue': {
      routes: '/MessageCenterPage'
      views: never
    }
    'src/pages/NonproductionOnlyLoginPage.vue': {
      routes: '/NonproductionOnlyLoginPage'
      views: never
    }
    'src/pages/NotebooksPage.vue': {
      routes: '/NotebooksPage'
      views: never
    }
    'src/pages/NoteShowPage.vue': {
      routes: '/NoteShowPage'
      views: never
    }
    'src/pages/RecallPage.vue': {
      routes: '/RecallPage'
      views: never
    }
    'src/pages/RecentPage.vue': {
      routes: '/RecentPage'
      views: never
    }
    'src/pages/UserNewRegisterPage.vue': {
      routes: '/UserNewRegisterPage'
      views: never
    }
  }

  /**
   * Get a union of possible route names in a certain route component file.
   * Used by the volar plugin to automatically type useRoute()
   *
   * @internal
   */
  export type _RouteNamesForFilePath<FilePath extends string> =
    _RouteFileInfoMap extends Record<FilePath, infer Info>
      ? Info['routes']
      : keyof RouteNamedMap
}
