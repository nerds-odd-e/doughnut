---
description: Vue.js frontend development in the Doughnut project
alwaysApply: false
---
# Frontend Development Cursor Rules

## Run Test in Terminal

To run frontend tests in terminal:

```
CURSOR_DEV=true nix develop -c pnpm frontend:test
```

## File Organization

- Frontend code lives in `frontend/src/`
- Test code lives in `frontend/tests/`
- Generated backend API code is in `frontend/src/generated/backend`

## Core Technologies

- Vue 3 with TypeScript
- DaisyUI + Tailwind for styling, with "daisy-" prefix
- Vitest for testing
- Biome for linting/formatting

## Component Rules

### Naming Conventions

- Component files should use PascalCase (e.g., `NoteShow.vue`, `GlobalBar.vue`)
- Test files should match component names with `.spec.ts` suffix
- Use `.vue` extension for components
- Use `.ts` extension for TypeScript files

### Component Structure

```vue
<script setup lang="ts">
// imports first
import { ref } from "vue"

// props/emits
const props = defineProps<{
  value: string
}>()
const emit = defineEmits<{
  (e: 'update:value', value: string): void
}>()

// composables/setup
const { managedApi } = useLoadingApi()

// refs/reactive state
const loading = ref(false)

// computed
const displayValue = computed(() => props.value.toUpperCase())

// methods
const handleClick = () => {
  emit('update:value', 'new value')
}

// lifecycle hooks last
onMounted(() => {
  // ...
})
</script>

<template>
  <div class="daisy-component">
    <!-- template content -->
  </div>
</template>

<style scoped lang="scss">
// scoped styles
</style>
```
### API Integration

- Use `managedApi` from `useLoadingApi()` for API calls
- Handle loading states appropriately
- Use proper error handling with try/catch
- Follow the API types from generated code

### CSS/Styling Rules

- Use DaisyUI classes with `daisy-` prefix (e.g., `daisy-btn`, `daisy-alert`)
- Avoid Bootstrap classes
- Choose theme-neutral colors
- Use scoped styles with SCSS
- Follow mobile-first responsive design

### Testing Guidelines

1. Focus on Component Behavior
   - Test through user interactions
   - Avoid testing implementation details
   - Use data-testid for test selectors

2. Minimal Mocking
   - Mock only external dependencies (API calls)
   - Use real component instances when possible
   - Use helper.managedApi for API mocks

2. **Component Props**
   - Use `helper.component(ComponentName).withStorageProps` if the component requires a prop `storageAccessor`. Do not need to pass a `storageAccessor` any more because the helper will add it to the props
   - If the component doesn't require `storageAccessor` in the props then just use 'withProps' instead of 'withStorageProps'
   - Test prop changes and their effects
   - Example:
   ```typescript
   const wrapper = helper
     .component(Component)
     .withStorageProps({ value: initialValue })
     .mount()
   await wrapper.setProps({ value: newValue })
   ```

4. **Data Builder Pattern**
   - Use makeMe factory for creating test data
   - Builders handle complex object creation
   - Example:
   ```typescript
   const note = makeMe.aNoteRealm
     .topicConstructor("Dummy Title")
     .details("Description")
     .please()
   ```

5. "mount" vs "render"
   - the test helper can either mount or render the component. "render" will call the testing-library render and mount will call the vuejs test util mount.
   - In either style testing, the test should avoid finding VueJS component in the render or mount result, so that the test can be more end to end.
