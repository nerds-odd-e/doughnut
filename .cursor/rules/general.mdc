---
description:
globs:
alwaysApply: true
---

# Development Environment Setup

## Starting the Development Environment

**IMPORTANT**: Always assume that the developer has already started all necessary services using:

```bash
pnpm sut
```

This command starts:
- Backend (with auto-reload on Java code changes)
- Frontend (with hot module replacement on Vue code changes)
- Mountebank (mock external services)
- Cypress IDE (for running/debugging e2e tests)

All services automatically restart when code changes are made. Developers should NOT need to manually restart services.

**If services are not running or if you need to suggest starting them**, recommend running `pnpm sut` in a separate terminal first.

## Running Commands in Terminal

This project uses nix to manage the development environment. There is currently a bug in Cursor IDE that prevents detection of `nix develop` completion in agent mode. Therefore, always use:

```
CURSOR_DEV=true nix develop -c <command>
```

### Running Tests

**Backend unit test:**
```
CURSOR_DEV=true nix develop -c pnpm backend:verify
```

**Frontend unit test:**
```
CURSOR_DEV=true nix develop -c pnpm frontend:test
```

**E2E test** (assumes services are already running via `pnpm sut`):
```
nix develop -c pnpm cypress run --spec e2e_test/features/ai_generated_recall_questions/question_contest.feature
```

# Development preferences

## High Cohesion

It is the top priority to keep high cohesion all the time.

* Minimize the duplicate and make sure the same concept has one representation acroess the whole system
* The code should have good mapping to the ubiquitous business domain
* Thing belong together should be placed together or close by, so that they are easy to use

## Keep it simple

* DO NOT follow the defensive programming style
* Use the simplest solution and minimum code to achieve what the prompt asked to do.
