---
description: mcp server related changes
alwaysApply: false
---
# doughnut-mcp-server MCP Server

A Model Context Protocol server for Doughnut.

Is in the `mcp-server` folder.

This is a TypeScript-based MCP server that demonstrates core MCP concepts by providing:

- Tools for getting instructions and updating note text content via the Doughnut backend API.

## Structure (minimal)

```
mcp-server/src/
  index.ts        // boot: create context, start stdio
  server.ts       // assemble server, list tools, route calls
  context.ts      // read env, create DoughnutApi
  api.ts          // DoughnutApi factory
  schemas.ts      // tool input schemas (shared)
  tools/index.ts  // tool registry + handlers
  types.ts        // shared types
  utils.ts        // error + validation helpers
```

## Development

### Building the MCP Server

Run this command to build the mcp server:

```sh
CURSOR_DEV=true nix develop -c pnpm mcp-server:bundle
```

Note: Rebuild the bundle before running the e2e `mcp_services.feature`.

### Running Unit Tests

The MCP server has comprehensive unit tests using Vitest. Run tests with:

```sh
CURSOR_DEV=true nix develop -c pnpm mcp-server:test
```

Or from the root directory:

```sh
CURSOR_DEV=true nix develop -c pnpm mcp-server:test
```

### Formatting Code

Format the MCP server code with:

```sh
CURSOR_DEV=true nix develop -c pnpm mcp-server:format
```

### Test Coverage

The unit tests cover:
- Utility functions (error handling, parameter validation, environment configuration)
- Server configuration and tool definitions
- Tool schema validation
- Response format validation
 - Behavior-focused assertions that are insensitive to internal structure

## CI/CD Integration

- Unit tests run as part of the "Frontend & MCP Unit Tests" job in GitHub Actions
- Formatting is included in the `pnpm format:all` command
- Tests are automatically executed on every push to main branch

## How to use this MCP Server

Add the below command to your AI MCP Server configuration:

```json
{
  "mcpServers": {
    "doughnut": {
      "disabled": false,
      "timeout": 60,
      "transportType": "stdio",
      "command": "node",
      "args": [
        "<doughnut root folder>/mcp-server/dist/mcp-server.bundle.mjs"
      ],
      "env": {
        "DOUGHNUT_API_BASE_URL": "http://localhost:9081",
        "DOUGHNUT_API_AUTH_TOKEN": "your-token-here"
      }
    }
  }
}
```

## Available Tools

- `get_instruction` - Get instruction about Doughnut
- `get_sampleapi` - Get sample API response
- `update_note_text_content` - Update the title and/or details of a note by note ID
- `get_user_info` - Get user information
- `get_notebook_list` - Get list of user's notebooks
- `get_graph_with_note_id` - Get graph data for a specific note